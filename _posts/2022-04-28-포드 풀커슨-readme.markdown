---
layout: post
title:  "포드 풀커슨 알고리즘"
date:   2022-04-28 15:25:37 +0900
categories: jekyll update
---
<h1># 포드 풀커슨 알고리즘 </h1>

<h3>포드 풀커슨(Ford-Fulkerson)알고리즘은 시작점과 끝점사이에 흐르는 네트워크 유량의 최댓값을 계산하는 알고리즘이다.
</h3>
<h1>소스(source) 와 싱크(sink)</h1>

<h3>소스 : 유량의 흐름이 시작되는 정점(S)</p></h3>
<h3>싱크 : 유량의 흐름이 끝나는 정점(t)</h3>

<h1>유량(Flow)과 용량(Capacity)</h1>

<h3>유량 : 임의의 정점과 정점사이에 흐름 </p>
용량 : 임이의 정점에서의 유량이 흐를수있는 최댓값</p></h3>

<h2>유량과 용량사이에는 다음 3가지 법칙이 성립한다.</h2><br>
 1. 임의의 정점에 들어오는 유량과 나가는 유량의 총합은 같다. <br>
 2. 임의의 간선에 흐르는 유량은 해당 간선의 용량을 초과할 수 없다.</br>
 3. 임의의 간선에 유량 f(u, v)가 흐르고 있다면, 역방향 간선에 -f(v, u)가 흐른다. 


<h1>증가경로(Augmenting Path)</h1>
<h3> 소스와 싱크를 연결하는 경로로 경로상의 모든 간선의 유량이 용량보다 크지 않은 경로


<h1>포드 풀커슨 알고리즘 작동 방식</h1>
<h3>1. 임이의 증가경로를 찾는다 <br>
2. 증가경로에 있는 정점에서의 용량-유량의 최솟값을 찾고 경로상의 모든 간선의 유량에 이값을 더한다. 즉 최솟값의 크기만큼 네트워크 유량을 흘려보낸다.<br>
3.다음 과정을 증가경로가 없을떄 까지 반복한다.</p>
 
 
 ```
 n = 6; //n은 정점의 개수 소스와 싱크 포함
    e = 7; // e는 간선의 개수

    capacity[0][1] = 10;
    capacity[0][3] = 10;
    capacity[1][2] = 15;
    capacity[2][3] = 6;
    capacity[2][5] = 10;
    capacity[3][4] = 25;
    capacity[4][5] = 10;  //용량값 지정
 
 ```
다음과 같이 정점의 개수 와 각 간선의 용량값을 입력받으면 다음그림처럼 그래프가 형성이 된다.<br>
(그림)<br>


 






