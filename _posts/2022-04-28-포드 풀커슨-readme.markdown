---
layout: post
title:  "포드 풀커슨 알고리즘"
date:   2022-04-28 15:25:37 +0900
categories: jekyll update
---
<head>
<body>
<h1> 포드 풀커슨 알고리즘 </h1>

포드 풀커슨(Ford-Fulkerson)알고리즘은 시작점과 끝점사이에 흐르는 네트워크 유량의 최댓값을 계산하는 알고리즘이다.

<h1>소스(source) 와 싱크(sink)</h1>

소스 : 유량의 흐름이 시작되는 정점(S)<br>
싱크 : 유량의 흐름이 끝나는 정점(t)

<h1>유량(Flow)과 용량(Capacity)</h1>

유량 : 임의의 정점과 정점사이에 흐름 </br>
용량 : 임이의 정점에서의 유량이 흐를수있는 최댓값</br>

<h2>유량과 용량사이에는 다음 3가지 법칙이 성립한다.</h2><br>
 1. 임의의 정점에 들어오는 유량과 나가는 유량의 총합은 같다. <br>
 2. 임의의 간선에 흐르는 유량은 해당 간선의 용량을 초과할 수 없다.</br>
 3. 임의의 간선에 유량 f(u, v)가 흐르고 있다면, 역방향 간선에 -f(v, u)가 흐른다. 


<h1>증가경로(Augmenting Path)</h1>
소스와 싱크를 연결하는 경로로 경로상의 모든 간선의 유량이 용량보다 크지 않은 경로<br>

<h1>포드 풀커슨 알고리즘 작동 방식</h1>
1. 임이의 증가경로를 찾는다 <br>
2. 증가경로에 있는 정점에서의 용량-유량의 최솟값을 찾고 경로상의 모든 간선의 유량에 이값을 더한다. 즉 최솟값의 크기만큼 네트워크 유량을 흘려보낸다.<br>
3.다음 과정을 증가경로가 없을떄 까지 반복한다.
 
 
 ```
 n = 6; //n은 정점의 개수 소스와 싱크 포함
    e = 7; // e는 간선의 개수

    capacity[0][1] = 10;
    capacity[0][3] = 10;
    capacity[1][2] = 15;
    capacity[3][2] = 6;
    capacity[2][5] = 10;
    capacity[3][4] = 25;
    capacity[4][5] = 10;  //용량값 지정
 
 ```
다음과 같이 정점의 개수 와 각 간선의 용량값을 입력받으면 다음그림처럼 그래프가 형성이 된다.<br>
<img src= "그림1.jpg"><br>
임의의 증가경로 S->3->2->T 를 임의로 잡고 증가경로에 있는 모든 간선의 용량-유량의 최솟값을 구해보면  3->2 에서 6이 나오게된다.<br>
따라서 S->3->2->T경로의 모든 간선에 6만큼의 유량을 흘려보내면 다음그림과 같이 나온다.<br>
<img src="그림2.jpg"><br>
다시 위 과정을 반복하여 임의의 증가경로를 잡는다. S->1->2->T로 잡으면 각 간선의 용량-유량값의 최솟값은  2->T간선의 10-6=4가 된다.<br>
S->1->2->T 경로의 간선에 4만큼의 유량을 흘려보내면 다음 그림과 같이 된다.<br>
<img src="그림3.jpg"><br>
다시 임의의 경로 S->3->4->T를 잡고 (용량-유량값)의 최솟값을 계산하면 s->3간선의 4가 최솟값이나오고 4만큼 임의의 증가경로에 흘려주면 다음과같이 된다.<br>
<img src="그림4.jpg"><br>
그다음 위에서 유량과 용량사이의 3가지 법칙에서 3번법칙 임의의 간선에 유량f(u,v)이 흐르고있으면 역방향 간선에 -f(u,v)가 흐르는 법칙을 이용하면 3->2에 6만큼의 유량이 흐르고있으면 2->3방향으로는 -6만큼의 유량이 흐르는것을 알수있다.<br>따라서 2->3의 간선에는 용량-유량값은 0-(-6)=6이나와 결국 2->3방향으로 최대 6만큼의 유량을 보낼수 있다.<br>
그러므로 증가경로를 하나 더잡을수 있게되어 S->1->2->3->4->T의 경로를 잡으면 각각의 간선의 용량-유량의 최솟값은 6이나온다. 해당증가경로에 6만큼의 유량을 흘려보내면<br>
<img src="그림5.jpg"><br>
이 나오게된다.<br>

증가경로에 있는 각각의 간선에 용량-유량값의 최솟값을 찾고 그 값을 해당 증가경로에 흘려보내는 코드를 구현하면 다음과같다.
```
while (bfs(source, sink)) {
        int increment = O;
        for (u = n - 1; pred[u] >= 0; u = pred[u]) {
            increment = min(increment, capacity[pred[u]][u] - flow[pred[u]][u]); // 증가경로상에 있는 정점에 용량-유량값 대입
        }
        for (u = n - 1; pred[u] >= 0; u = pred[u]) {
            flow[pred[u]][u] += increment;  
            flow[u][pred[u]] -= increment;  //증가경로상에 있는 정점에 용량-유량값 대입, f(u,v)=-f(u,v)
        }
        max_flow += increment; 
    }
    return max_flow;
```
실행결과 : <img src="실행결과.jpg">











</body>
</head>







